spring:
  application:
        name: building-object-monitoring-service
  datasource:
     url: jdbc:postgresql://localhost:5432/db?currentSchema=building_object_monitoring
     driver-class-name: org.postgresql.Driver
     username: postgres
     password: password
  liquibase:
     change-log: classpath:db/changelog/db.changelog-master.xml
     url: jdbc:postgresql://localhost:5432/db?currentSchema=building_object_monitoring
     password: password
     user: postgres
  cache:
    cache-names: dictionary,dictionaryByCode
    caffeine:
       spec: initialCapacity=0, maximumSize=100, expireAfterAccess=1m
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: building-object-monitoring
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
      alphanumeric-ids:
        enabled: true

resilience4j.retry:
  configs:
    default:
      maxAttempts: 10
      waitDuration: 100ms
  instances:
    throwingException:
      baseConfig: default
      maxAttempts: 10
      retryExceptions:
        - java.lang.IllegalStateException
        - java.lang.Exception
        - java.lang.Throwable
        - feign.FeignException.BadRequest

eureka:
  instance:
    status-page-url-path: /actuator/info
    health-check-url-path: /actuator/health
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}


grpc:
  client:
    dictionary-service-grpc:
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiation-type: plaintext
      address: 'discovery:///dictionary-service-grpc'

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /api-docs-ui
  enable-kotlin: false

management:
  server:
    port: 8089
  info:
    os:
      enabled: true
    java:
      enabled: true
  metrics:
    enable:
      tomcat: true
      jvm: true
      process: true
      hikaricp: true
      system: true
      jdbc: true
      logback: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99, 0.999
      slo:
        http.server.requests: 1ms, 10ms, 50ms
      percentiles-histogram:
        http.server.requests: true
  endpoint:
    loggers:
      enabled: true
    metrics:
      enabled: true
      distribution:
        slo:
          http:
            server:
              requests: 1ms, 10ms, 50ms
        percentiles-histogram:
          http:
            server:
              requests: true
        percentiles:
          http:
            server:
              requests: 0.5, 0.9, 0.95, 0.99, 0.999
    health:
      show-details: always
  endpoints:
    web:
      exposure:
         include: '*' 
  tracing:
    sampling:
      probability: 1.0

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

topic:
  alert:
    risk:
      score: risk.score.notification.v1
  building-object:
    monitoring:
      request: building-object.monitoring.request.v1
    sale:
      request: building-object.sale.request.v1